) |>
inner_join(df_sfdc_cust_date_max,
by = join_by(
X0SOURSYSTEM == SOURSYSTEM,
CUSTOMER_ID == CUSTOMER_ID,
RESPONSE_DATE == DATE_MAX)) |>
mutate(
CHURN_GROUP = CHURN_TYPE,
CHURN.STATUS.CHECK = case_when(
SALES_RESPONSE %in% c('Confirm', 'Confirm Gain') ~ CHURN_TYPE,
TRUE ~ 'CHANGE TO ONGOING'
),
CHURN.STATUS.REASON = case_when(
CHURN_GROUP == "GAIN" & CHURN.STATUS.CHECK == "GAIN" ~ 'New customer',
REASON_CODE %in% c('Bankrupcy', 'Credit Risk', 'Economy, Legal,Safety') ~ 'Financial distress',
REASON_CODE %in% c('Changed Customer number') ~ 'Data quality',
REASON_CODE %in% c('Customer service capabilities') ~ 'Service',
REASON_CODE %in% c('Customer site closure or relocation',
'Process conversion (gas to non-gas)',
'Product change (gas subsititution)',
'Project / spot business / one-timer') ~ 'Low or no demand',
REASON_CODE %in% c('Discontinuous invoicing process', 'Seasonal demand / supply', 'Temporary shutdown') ~ 'Discontinuous demand',
REASON_CODE %in% c('Higher pricing vs. competitor') ~ 'Pricing',
REASON_CODE %in% c('Linde decision') ~ 'Linde Management Decision',
REASON_CODE %in% c('Others') ~ 'Others',
REASON_CODE %in% c('Supply issue - enter comment') ~ 'Poor or no supply',
REASON_CODE %in% c('Supply mode change') ~ 'Data quality',
# REASON_CODE == "" ~ 'New Customer',
REASON_CODE == "Customer regained" ~ 'Discontinuous demand'
),
COMMENTS = COMMENT,
VALIDATION.USER = "SFDC_INTEGRATION",
VALIDATION.DATE = paste0(RESPONSE_DATE, 'T00:00:00Z')
) |>
select(X0SOURSYSTEM, CUSTOMER_ID, CHURN_GROUP, CHURN.STATUS.CHECK, CHURN.STATUS.REASON, COMMENTS, VALIDATION.USER, VALIDATION.DATE)
table(df_sfdc_join$CHURN.STATUS.REASON)
df_feedback_SFDC <- df_feedback |>
left_join(df_sfdc_join,
by = join_by(X0SOURSYSTEM == X0SOURSYSTEM,
CUSTOMER_ID == CUSTOMER_ID,
CHURN_GROUP == CHURN_GROUP)) |>
mutate(
CHURN.STATUS.CHECK = coalesce(CHURN.STATUS.CHECK.y, CHURN.STATUS.CHECK.x),
CHURN.STATUS.REASON = coalesce(CHURN.STATUS.REASON.y, CHURN.STATUS.REASON.x),
COMMENTS = coalesce(COMMENTS.y, COMMENTS.x),
VALIDATION.USER = coalesce(VALIDATION.USER.y, VALIDATION.USER.x),
VALIDATION.DATE = coalesce(VALIDATION.DATE.y, VALIDATION.DATE.x),
SALES.PERSON.INCORRECT = case_when(
CHURN.STATUS.CHECK.y != "" ~ "False",
TRUE ~ SALES.PERSON.INCORRECT
),
# VALIDATION.DATE = case_when(
#   CHURN.STATUS.CHECK.y != "" ~ paste0(VALIDATION.DATE.y, 'T00:00:00Z'),
#   TRUE ~ VALIDATION.DATE
# ),
VALIDATION.STATUS = case_when(
CHURN.STATUS.CHECK.y != "" ~ "Completed",
TRUE ~ VALIDATION.STATUS
)
) |>
dplyr::select(
DATE,
CUSTOMER_ID,
LOCAL.CUSTOMER.TEXT,
X0SOURSYSTEM,
Country.Text,
X0SALESORG,
X0CREATEDON,
X_LGC_SALESH60___T,
X_LGC_SALESREP1,
X_LGC_SALESREP1___T,
X_LGC_SALESREP2,
X_LGC_SALESREP2___T,
X_LGC_ISIC_INDS___T,
TOP_GSCHANNEL___T,
TOP_DOC_TYPE___T,
ANNUAL_SALES_COPA,
TOP_SPEND_SUPGR___T,
TOP_SPEND_MAT___T,
CHURN_GROUP,
CHURN_DATE,
FIRST_ORDER_DATE,
LAST_ORDER_DATE,
IPP_MEDIAN,
QTY_STOCK_CYL_1,
CHURN.STATUS.CHECK,
CHURN.STATUS.REASON,
COMMENTS,
SALES.PERSON.INCORRECT,
VALIDATION.STATUS,
VALIDATION.DATE,
VALIDATION.USER,
USER_ID,
DELETION_FLAG,
USER_EMAIL,
ORG_MGR_UID
) |>
mutate(
CHURN_GROUP_CORRECT = case_when(
CHURN.STATUS.CHECK == "CHANGE TO ONGOING" ~ "ONGOING",
TRUE ~ CHURN_GROUP
)
) |>
distinct()
View(df_feedback_SFDC)
df_test <- df_feedback_SFDC |>
group_by(X0SOURSYSTEM, CUSTOMER_ID, DATE) |>
count()
View(df_test)
source("~/PROJ_CUST_CHURN/CODE_R/PROD/CHURN_FEEDBACK_LIST_APP_2_HANA.R", echo=TRUE)
shiny::runApp('PROJ_CUST_CHURN/CODE_SHINY/PROD/CustomerChurn')
str_sort(c("TOPLINE", "CUSTOMER CHURN", "CUSTOMER PANORAMA", "DIFOT", "PRICING IMPACT", "ISSUE TRACKER",
"USER LOG DASHBOARD", "AUTOUPDATEPAL"))
library(tidyverse)
str_sort(c("TOPLINE", "CUSTOMER CHURN", "CUSTOMER PANORAMA", "DIFOT", "PRICING IMPACT", "ISSUE TRACKER",
"USER LOG DASHBOARD", "AUTOUPDATEPAL"))
shiny::runApp('CODE_SHINY/IssueTracker')
runApp('CODE_SHINY/IssueTracker')
shiny::runApp('PROJ_SPC/SHINY')
Sys.time()-60*60*24*30*3
df_country <- str_sort(dbGetQuery(con, "SELECT DISTINCT \"COUNTRY\" FROM 2550_LZAV.analysisoverview")$COUNTRY)
con <- dbConnect(odbc::odbc(), dsn = "HNP",
uid = rawToChar(userid, multiple = FALSE),
pwd = rawToChar(password, multiple = FALSE))
df_country <- str_sort(dbGetQuery(con, "SELECT DISTINCT \"COUNTRY\" FROM 2550_LZAV.analysisoverview")$COUNTRY)
df_country <- str_sort(dbGetQuery(con, "SELECT DISTINCT \"COUNTRY\" FROM \"2550_LZAV\".\"analysisoverview\"")$COUNTRY)
df_plant <- str_sort(dbGetQuery(con, "SELECT DISTINCT \"Plant Name\" FROM \"2550_LZAV\".\"analysisoverview\"")$`Plant Name`)
runApp('PROJ_SPC/SHINY')
df_country_plant <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COUNTRY_PLANT\"
"
)
View(df_country_plant)
df_component_symbol <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COMPONENT_SYMBOL\"
"
)
View(df_component_symbol)
df_component_symbol <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COMPONENT_SYMBOL\"
"
) |>
mutate(COMP = paste0(Component, `Component Symbol`, sep = " "))
View(df_component_symbol)
df_component_symbol <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COMPONENT_SYMBOL\"
"
) |>
mutate(COMP = paste0(Component, " (", `Component Symbol`, ")"))
View(df_component_symbol)
df_component_symbol <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COMPONENT_SYMBOL\"
"
) |>
mutate(COMP = paste0(Component, " - ", `Component Symbol`))
View(df_component_symbol)
df_country_plant <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COUNTRY_PLANT\"
"
) |>
rename(PLANT = `Plant Name`)
df_country_plant_component_symbol_device <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COUNTRY_PLANT_COMPONENT_SYMBOL_DEVICE\"
"
)
View(df_country_plant_component_symbol_device)
df_country_plant_component_symbol_device <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COUNTRY_PLANT_COMPONENT_SYMBOL_DEVICE\"
"
) |>
rename(PLANT = `Plant Name`,
DEVICE = `Device Name`) |>
mutate(COMP = paste0(Component, " - ", `Component Symbol`))
df_country_plant_component_symbol_device <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COUNTRY_PLANT_COMPONENT_SYMBOL_DEVICE\"
"
) |>
rename(PLANT = `Plant Name`,
DEVICE = `Device Name`) |>
mutate(COMP = paste0(Component, " - ", `Component Symbol`)) |>
dplyr::select(COUNTRY, PLANT, COMP, DEVICE)
View(df_country_plant_component_symbol_device)
str_sort(unique(df_country_plant_component_symbol_device$COUNTRY))
View(df_country_plant)
runApp('PROJ_SPC/SHINY')
df_specification <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_SPECIFICATION\"
"
)
View(df_specification)
runApp('PROJ_SPC/SHINY')
c("", str_sort(df_specification$SPECIFICATION))
length(df_specification$SPECIFICATION)+1
runApp('PROJ_SPC/SHINY')
View(df_country_plant_component_symbol_device)
runApp('PROJ_SPC/SHINY')
df_country_plant_component_symbol_device <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COUNTRY_PLANT_COMPONENT_SYMBOL_DEVICE\"
"
) |>
rename(PLANT = `Plant Name`,
DEVICE = `Device Name`) |>
mutate(COMP = paste0(Component, " - ", `Component Symbol`)) |>
dplyr::select(COUNTRY, PLANT, COMP, DEVICE)
runApp('PROJ_SPC/SHINY')
source("C:/Users/c9gb34/OneDrive - Linde Group/Documents/CODE_R/R_LOGIN_CREDENTIALS.R")
con <- dbConnect(odbc::odbc(), dsn = "HNP",
uid = rawToChar(userid, multiple = FALSE),
pwd = rawToChar(password, multiple = FALSE))
rm(userid, password)
df_country_plant_component_symbol_device <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COUNTRY_PLANT_COMPONENT_SYMBOL_DEVICE\"
"
) |>
rename(PLANT = `Plant Name`,
DEVICE = `Device Name`,
TANK = `Tank Name`) |>
mutate(COMP = paste0(Component, " - ", `Component Symbol`)) |>
dplyr::select(COUNTRY, PLANT, COMP, DEVICE, TANK)
View(df_country_plant_component_symbol_device)
df_country_plant_component_symbol_device <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COUNTRY_PLANT_COMPONENT_SYMBOL_DEVICE\"
"
) |>
rename(PLANT = `Plant Name`,
DEVICE = `Device Name`,
TANK = `Tank Name`) |>
mutate(COMP = paste0(Component, " - ", `Component Symbol`),
TANK = replace_na("Others")) |>
dplyr::select(COUNTRY, PLANT, COMP, DEVICE, TANK)
View(df_country_plant_component_symbol_device)
df_country_plant_component_symbol_device <- dbGetQuery(
con,
"
SELECT
*
FROM
\"2550_LZAV\".\"SPC_COUNTRY_PLANT_COMPONENT_SYMBOL_DEVICE\"
"
) |>
rename(PLANT = `Plant Name`,
DEVICE = `Device Name`,
TANK = `Tank Name`) |>
mutate(COMP = paste0(Component, " - ", `Component Symbol`),
TANK = replace_na(TANK, "Others")) |>
dplyr::select(COUNTRY, PLANT, COMP, DEVICE, TANK)
View(df_country_plant_component_symbol_device)
runApp('PROJ_SPC/SHINY')
library(openxlsx)
library(tidyverse)
library(ggplot2)
library(patchwork)
library(RSQLite)
library(DBI)
library(plotly)
library(leaflet)
library(pool)
library(lubridate)
library(httr2)
library(jsonlite)
con <- dbPool(odbc::odbc(), dsn = "HANA_HNP_SHINY",
uid = "TWU1990_SHINY",
pwd = "k70fSA$x")
df_sap <- dbGetQuery(
con,
"
SELECT
\"_LGC_CREATEDON\" AS DATE,
--\"0CREA_TIME\" AS TIME,
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\",
SUM(\"CONDITION_VALUE\") AS SALES
FROM
\"4250_PRICING\".\"REN_DPVM_00_DATA_TBL\"
WHERE
\"0SALESORG\" = 'NO10'
AND YEAR(\"_LGC_CREATEDON\") IN (2024, 2025)
GROUP BY
\"_LGC_CREATEDON\",
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\"
"
)
View(df_sap)
poolClose(con)
summary(df_sap)
View(df_sap)
df_sap <- dbGetQuery(
con,
"
SELECT
--\"_LGC_CREATEDON\" AS DATE,
--\"0CREA_TIME\" AS TIME,
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\",
SUM(\"CONDITION_VALUE\") AS SALES
FROM
\"4250_PRICING\".\"REN_DPVM_00_DATA_TBL\"
WHERE
\"0SALESORG\" = 'NO10'
AND YEAR(\"_LGC_CREATEDON\") IN (2024, 2025)
GROUP BY
--\"_LGC_CREATEDON\",
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\"
"
)
con <- dbPool(odbc::odbc(), dsn = "HANA_HNP_SHINY",
uid = "TWU1990_SHINY",
pwd = "k70fSA$x")
df_sap <- dbGetQuery(
con,
"
SELECT
--\"_LGC_CREATEDON\" AS DATE,
--\"0CREA_TIME\" AS TIME,
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\",
SUM(\"CONDITION_VALUE\") AS SALES
FROM
\"4250_PRICING\".\"REN_DPVM_00_DATA_TBL\"
WHERE
\"0SALESORG\" = 'NO10'
AND YEAR(\"_LGC_CREATEDON\") IN (2024, 2025)
GROUP BY
--\"_LGC_CREATEDON\",
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\"
"
)
poolClose(con)
View(df_sap)
con <- dbPool(odbc::odbc(), dsn = "HANA_HNP_SHINY",
uid = "TWU1990_SHINY",
pwd = "k70fSA$x")
df_sap <- dbGetQuery(
con,
"
SELECT
--\"_LGC_CREATEDON\" AS DATE,
--\"0CREA_TIME\" AS TIME,
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\",
SUM(\"CONDITION_VALUE\") AS SALES,
COUNT(DISTINCT(\"0DOC_NUMBER\")) AS N_ORDER
FROM
\"4250_PRICING\".\"REN_DPVM_00_DATA_TBL\"
WHERE
\"0SALESORG\" = 'NO10'
AND YEAR(\"_LGC_CREATEDON\") IN (2024, 2025)
GROUP BY
--\"_LGC_CREATEDON\",
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\"
"
)
poolClose(con)
View(df_sap)
con <- dbPool(odbc::odbc(), dsn = "HANA_HNP_SHINY",
uid = "TWU1990_SHINY",
pwd = "k70fSA$x")
df_sap <- dbGetQuery(
con,
"
SELECT
--\"_LGC_CREATEDON\" AS DATE,
--\"0CREA_TIME\" AS TIME,
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\",
SUM(\"CONDITION_VALUE\") AS SALES,
COUNT(DISTINCT(\"0DOC_NUMBER\")) AS N_ORDER
FROM
\"4250_PRICING\".\"REN_DPVM_00_DATA_TBL\"
WHERE
\"0SALESORG\" = 'NO10'
AND YEAR(\"_LGC_CREATEDON\") IN (2024, 2025)
AND \"CONDITION_VALUE\" > 0
GROUP BY
--\"_LGC_CREATEDON\",
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\"
"
)
poolClose(con)
View(df_sap)
df_sap_top200 <- df_sap |>
arrange(desc(N_ORDER), desc(SALES))
View(df_sap_top200)
df_sap_top200 <- df_sap |>
arrange(desc(N_ORDER), desc(SALES)) |>
slice_max(n = 200)
df_sap_top200 <- df_sap |>
arrange(desc(N_ORDER), desc(SALES)) |>
slice_head(n = 200)
df_sap_top200 <- df_sap |>
arrange(desc(N_ORDER), desc(SALES)) |>
slice_head(n = 200)
View(df_sap_top200)
con <- dbPool(odbc::odbc(), dsn = "HANA_HNP_SHINY",
uid = "TWU1990_SHINY",
pwd = "k70fSA$x")
df_pvm_master <- dbGetQuery(
con,
"
SELECT DISTINCT
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\",
\"CUST_LNG\" AS LONG,
\"CUST_LAT\" AS LAT,
FROM
\"4250_PRICING\".\"REN_DPVM_00_DATA_MASTER_STOCK_TBL\"
"
)
df_pvm_master <- dbGetQuery(
con,
"
SELECT DISTINCT
\"_LGC_CUSTOMER\",
\"_LGC_CUSTOMER___T\",
\"CUST_LNG\" AS LONG,
\"CUST_LAT\" AS LAT
FROM
\"4250_PRICING\".\"REN_DPVM_00_DATA_MASTER_STOCK_TBL\"
"
)
df_pvm_master <- dbGetQuery(
con,
"
SELECT DISTINCT
\"CUST_ID\",
\"_LGC_CUSTOMER___T\",
\"CUST_LNG\" AS LONG,
\"CUST_LAT\" AS LAT
FROM
\"4250_PRICING\".\"REN_DPVM_00_DATA_MASTER_STOCK_TBL\"
"
)
View(df_pvm_master)
poolClose(con)
df_sap_top200 <- df_sap |>
arrange(desc(N_ORDER), desc(SALES)) |>
slice_head(n = 200) |>
left_join(df_pvm_master, by = join_by(`_LGC_CUSTOMER` == CUST_ID))
View(df_sap_top200)
setwd("~/GitHub/test_shiny")
rsconnect::writeManifest()
shiny::runApp()
